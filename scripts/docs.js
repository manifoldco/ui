const { existsSync, readFileSync, writeFileSync } = require('fs');
const { resolve } = require('path');
const Showdown = require('showdown');

/* Settings */

const MARKDOWN_OPTIONS = {
  emoji: true,
  tables: true,
};
const HTML_BEFORE = `

  <!-- DO NOT EDIT! This is autogenerated from a README. -->
  <!-- Any changes here will be blown away. Edit the README instead. -->

`;
const HTML_AFTER = ``;

/* Methods */
function getComponentName(contents) {
  const match = contents.match(/BEGIN README [a-z-]+(?=\s)/);
  return match
    ? match[0]
        .replace('BEGIN README ', '')
        .trim()
        .toLowerCase()
    : '';
}

/* Init */
// Select: opening comment + anything (including newlines) + closing comment
const MAGIC_FORMULA = /<!-- BEGIN README [^]+?(?=<!-- END README -->)/g;
const converter = new Showdown.Converter(MARKDOWN_OPTIONS);
converter.setFlavor('github');

const indexHTML = resolve(__dirname, '..', 'src', 'index.html');
const original = readFileSync(indexHTML, 'utf8');
let withDocs = original;
const readmes = original.match(MAGIC_FORMULA);
if (Array.isArray(readmes)) {
  readmes.forEach(readme => {
    const component = getComponentName(readme);
    const filepath = resolve(__dirname, '..', 'src', 'components', component, 'readme.md');
    if (!existsSync(filepath)) {
      console.warn(`${filepath} not found`);
      return;
    }
    const md = readFileSync(filepath, 'utf8');
    const html = converter.makeHtml(md);
    // We included the opening comment in our selection, so letâ€™s put it back
    const newContents = `<!-- BEGIN README ${component} -->
${HTML_BEFORE}
${html}
${HTML_AFTER}`;
    withDocs = withDocs.replace(readme, newContents);
  });
}

writeFileSync(indexHTML, withDocs, 'utf8');

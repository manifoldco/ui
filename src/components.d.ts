/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Catalog,
} from './types/catalog';
import {
  Gateway,
} from './types/gateway';
import {
  Subscriber,
} from './state/connection';
import {
  RestFetch,
} from './utils/restFetch';
import {
  Marketplace,
} from './types/marketplace';
import {
  GraphqlFetch,
} from './utils/graphqlFetch';
import {
  Option,
} from './types/Select';

export namespace Components {
  interface ManifoldActivePlan {
    'isExistingResource'?: boolean;
    'plans'?: Catalog.ExpandedPlan[];
    'product'?: Catalog.Product;
    'regions'?: string[];
    'selectedResource'?: Gateway.Resource;
  }
  interface ManifoldAuthToken {
    'oauthUrl'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'setAuthToken': (s: string) => void;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'subscribe': (s: Subscriber) => () => void;
    'token'?: string;
  }
  interface ManifoldBadge {}
  interface ManifoldButton {
    'color'?: 'black' | 'gray' | 'orange' | 'pink' | 'white';
    'disabled'?: boolean;
    'href'?: string;
    'size'?: 'medium' | 'small';
    'stencilClickEvent'?: (e: MouseEvent) => void;
    'type'?: 'button' | 'submit';
  }
  interface ManifoldButtonLink {
    'color'?: 'black' | 'gray' | 'orange' | 'pink' | 'white';
    'href': string;
    'preserveEvent'?: boolean;
    'rel'?: string;
    'size'?: 'medium' | 'small';
    'stencilClickEvent'?: (e: MouseEvent) => void;
    'target'?: string;
  }
  interface ManifoldConnection {
    /**
    * _(optional)_ Specify `env="stage"` for staging
    */
    'env': 'local' | 'stage' | 'prod';
    /**
    * _(hidden)_ Passed by the state tunnel
    */
    'setEnv'?: (env: 'local' | 'stage' | 'prod') => void;
    'setWaitTime'?: (waitTime: number) => void;
    /**
    * _(optional)_ Wait time for the fetch calls before it times out
    */
    'waitTime': number;
  }
  interface ManifoldCostDisplay {
    'baseCost'?: number;
    'compact'?: boolean;
    'measuredFeatures': Catalog.ExpandedFeature[];
    'startingAt'?: boolean;
  }
  interface ManifoldCredentials {
    'resourceId'?: string;
    'resourceLabel': string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldCredentialsView {
    'credentials'?: Marketplace.Credential[];
    'loading': boolean;
    'resourceLabel': string;
  }
  interface ManifoldDataDeprovisionButton {
    'loading'?: boolean;
    'resourceId'?: string;
    /**
    * The label of the resource to deprovision
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataHasResource {
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataManageButton {
    'features'?: Gateway.FeatureMap;
    'planId'?: string;
    'productId'?: string;
    'regionId'?: string;
    /**
    * Name of resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataProductLogo {
    /**
    * _(optional)_ `alt` attribute
    */
    'alt'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'graphqlFetch'?: GraphqlFetch;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * _(Deprecated)_ Look up product logo from resource
    */
    'resourceLabel'?: string;
  }
  interface ManifoldDataProductName {
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * Look up product name from resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataProvisionButton {
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'graphqlFetch'?: GraphqlFetch;
    'ownerId'?: string;
    /**
    * Plan to provision (slug)
    */
    'planLabel'?: string;
    /**
    * Product to provision (slug)
    */
    'productLabel'?: string;
    /**
    * Region to provision (ID)
    */
    'regionId'?: string;
    /**
    * The label of the resource to provision
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataRenameButton {
    'loading'?: boolean;
    /**
    * The new label to give to the resource
    */
    'newLabel': string;
    /**
    * The id of the resource to rename, will be fetched if not set
    */
    'resourceId'?: string;
    /**
    * The label of the resource to rename
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataResourceList {
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Link format structure, with `:resource` placeholder
    */
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataResourceLogo {
    /**
    * _(optional)_ `alt` attribute
    */
    'alt'?: string;
    /**
    * Look up product logo from resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataSsoButton {
    'loading'?: boolean;
    /**
    * The id of the resource to rename, will be fetched if not set
    */
    'resourceId'?: string;
    /**
    * The label of the resource to rename
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldForwardSlot {}
  interface ManifoldIcon {
    /**
    * a CSS variable starting with `--manifold-c-*`
    */
    'color'?: string;
    /**
    * a CSS variable starting with `--manifold-g-*`
    */
    'gradient'?: string;
    /**
    * The icon ID
    */
    'icon': string;
    'marginLeft'?: boolean;
    'marginRight'?: boolean;
  }
  interface ManifoldImageGallery {
    'images'?: string[];
  }
  interface ManifoldInput {
    'defaultValue'?: string;
    'disabled'?: boolean;
    'inputId'?: string;
    'name'?: string;
    'pattern'?: string;
    'required'?: boolean;
    'type'?: string;
  }
  interface ManifoldLazyImage {
    'alt': string;
    'itemprop'?: string;
    'src': string;
  }
  interface ManifoldMarketplace {
    /**
    * Comma-separated list of featured products (labels)
    */
    'featured'?: string;
    /**
    * Hide categories & side menu?
    */
    'hideCategories'?: boolean;
    /**
    * Hide search?
    */
    'hideSearch'?: boolean;
    /**
    * Hide template cards?
    */
    'hideTemplates'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Product link structure, with `:product` placeholder
    */
    'productLinkFormat'?: string;
    /**
    * Comma-separated list of shown products (labels)
    */
    'products'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    /**
    * Template format structure, with `:product` placeholder
    */
    'templateLinkFormat'?: string;
  }
  interface ManifoldMarketplaceGrid {
    'featured'?: string[];
    'freeProducts'?: string[];
    'hideCategories'?: boolean;
    'hideSearch'?: boolean;
    'hideTemplates'?: boolean;
    'preserveEvent': boolean;
    'productLinkFormat'?: string;
    'products': string[];
    'services': Catalog.Product[];
    'skeleton'?: boolean;
    'templateLinkFormat'?: string;
  }
  interface ManifoldMockResource {
    'mock': Gateway.Resource;
  }
  interface ManifoldNumberInput {
    'decrementDisabledLabel'?: string;
    'error'?: string;
    'increment': number;
    'incrementDisabledLabel'?: string;
    'max': number;
    'min': number;
    'name': string;
    'suffix': string;
    'value': number;
  }
  interface ManifoldPlan {
    /**
    * URL-friendly slug (e.g. `"kitefin"`)
    */
    'planLabel'?: string;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldPlanCost {
    /**
    * All plan features
    */
    'allFeatures': Catalog.ExpandedFeature[];
    /**
    * Compact mode (for plan selector sidebar)
    */
    'compact'?: boolean;
    /**
    * Plan default cost
    */
    'defaultCost'?: number;
    /**
    * Plan ID
    */
    'planId'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    /**
    * User-selected plan features (needed only for customizable)
    */
    'selectedFeatures'?: Gateway.FeatureMap;
  }
  interface ManifoldPlanDetails {
    'isExistingResource'?: boolean;
    'plan'?: Catalog.ExpandedPlan;
    'product'?: Catalog.Product;
    'regions'?: string[];
    'resourceFeatures'?: Gateway.ResolvedFeature[];
    'resourceRegion'?: string;
    'scrollLocked'?: boolean;
  }
  interface ManifoldPlanMenu {
    'plans'?: Catalog.ExpandedPlan[];
    'selectPlan': Function;
    'selectedPlanId'?: string;
  }
  interface ManifoldPlanSelector {
    /**
    * Show only free plans?
    */
    'freePlans'?: boolean;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * Specify region order
    */
    'regions'?: string;
    /**
    * Is this tied to an existing resource?
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldProduct {
    /**
    * _(optional)_ Hide the CTA on the left?
    */
    'productLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldProductDetails {
    'product'?: Catalog.Product;
  }
  interface ManifoldProductPage {
    'product'?: Catalog.Product;
    'provider'?: Catalog.Provider;
  }
  interface ManifoldRegionSelector {
    'allowedRegions': string[];
    'ariaLabel': string;
    'name': string;
    'preferredRegions'?: string[];
    'regions'?: Catalog.Region[];
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    'value'?: string;
  }
  interface ManifoldResourceCard {
    'label'?: string;
    'preserveEvent'?: boolean;
    'resourceId'?: string;
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceCardView {
    'label'?: string;
    'loading'?: boolean;
    'logo'?: string;
    'name'?: string;
    'preserveEvent'?: boolean;
    'resourceId'?: string;
    'resourceLinkFormat'?: string;
    'resourceStatus'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceContainer {
    /**
    * Set whether or not to refetch the resource from the api until it is in an available and valid state
    */
    'refetchUntilValid': boolean;
    /**
    * Which resource does this belong to?
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceCredentials {
    'data'?: Gateway.Resource;
    'loading': boolean;
  }
  interface ManifoldResourceDeprovision {
    'data'?: Gateway.Resource;
    'loading': boolean;
  }
  interface ManifoldResourceDetails {}
  interface ManifoldResourceDetailsView {
    'data'?: Gateway.Resource;
  }
  interface ManifoldResourceList {
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Link format structure, with `:resource` placeholder
    */
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourcePlan {}
  interface ManifoldResourceProduct {
    'data'?: Gateway.Resource;
    'loading': boolean;
  }
  interface ManifoldResourceRename {
    'data'?: Gateway.Resource;
    'loading': boolean;
    /**
    * The new label to give to the resource
    */
    'newLabel': string;
  }
  interface ManifoldResourceSso {
    'data'?: Gateway.Resource;
    'loading': boolean;
  }
  interface ManifoldResourceStatus {
    'data'?: Gateway.Resource;
    'loading': boolean;
    'size'?: 'xsmall' | 'small' | 'medium';
  }
  interface ManifoldResourceStatusView {
    'loading'?: boolean;
    'resourceState'?: string;
    'size'?: 'xsmall' | 'small' | 'medium';
  }
  interface ManifoldSelect {
    'defaultValue'?: string;
    'name': string;
    'options': Option[];
    'required'?: boolean;
  }
  interface ManifoldServiceCard {
    'isFeatured'?: boolean;
    'preserveEvent'?: boolean;
    'product'?: Catalog.Product;
    'productId'?: string;
    'productLabel'?: string;
    'productLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldServiceCardView {
    'description'?: string;
    'isFeatured'?: boolean;
    'isFree'?: boolean;
    'logo'?: string;
    'name'?: string;
    'preserveEvent'?: boolean;
    'productId'?: string;
    'productLabel'?: string;
    'productLinkFormat'?: string;
    'skeleton'?: boolean;
  }
  interface ManifoldSkeletonImg {}
  interface ManifoldSkeletonText {}
  interface ManifoldTemplateCard {
    'category': string;
    'preserveEvent': boolean;
    'templateLinkFormat'?: string;
  }
  interface ManifoldToast {
    /**
    * `success` | `warning` | `error`
    */
    'alertType'?: 'success' | 'warning' | 'error' | undefined;
    /**
    * Is this dismissable?
    */
    'dismissable'?: boolean;
    /**
    * Use custom icon path data (1024×1024)
    */
    'icon'?: string;
  }
  interface ManifoldToggle {
    'ariaLabelledby'?: string;
    'defaultValue'?: boolean;
    'disabled'?: boolean;
    'label'?: string;
    'name': string;
  }
  interface ManifoldTooltip {
    'labelText'?: string;
  }
}

declare global {


  interface HTMLManifoldActivePlanElement extends Components.ManifoldActivePlan, HTMLStencilElement {}
  var HTMLManifoldActivePlanElement: {
    prototype: HTMLManifoldActivePlanElement;
    new (): HTMLManifoldActivePlanElement;
  };

  interface HTMLManifoldAuthTokenElement extends Components.ManifoldAuthToken, HTMLStencilElement {}
  var HTMLManifoldAuthTokenElement: {
    prototype: HTMLManifoldAuthTokenElement;
    new (): HTMLManifoldAuthTokenElement;
  };

  interface HTMLManifoldBadgeElement extends Components.ManifoldBadge, HTMLStencilElement {}
  var HTMLManifoldBadgeElement: {
    prototype: HTMLManifoldBadgeElement;
    new (): HTMLManifoldBadgeElement;
  };

  interface HTMLManifoldButtonElement extends Components.ManifoldButton, HTMLStencilElement {}
  var HTMLManifoldButtonElement: {
    prototype: HTMLManifoldButtonElement;
    new (): HTMLManifoldButtonElement;
  };

  interface HTMLManifoldButtonLinkElement extends Components.ManifoldButtonLink, HTMLStencilElement {}
  var HTMLManifoldButtonLinkElement: {
    prototype: HTMLManifoldButtonLinkElement;
    new (): HTMLManifoldButtonLinkElement;
  };

  interface HTMLManifoldConnectionElement extends Components.ManifoldConnection, HTMLStencilElement {}
  var HTMLManifoldConnectionElement: {
    prototype: HTMLManifoldConnectionElement;
    new (): HTMLManifoldConnectionElement;
  };

  interface HTMLManifoldCostDisplayElement extends Components.ManifoldCostDisplay, HTMLStencilElement {}
  var HTMLManifoldCostDisplayElement: {
    prototype: HTMLManifoldCostDisplayElement;
    new (): HTMLManifoldCostDisplayElement;
  };

  interface HTMLManifoldCredentialsElement extends Components.ManifoldCredentials, HTMLStencilElement {}
  var HTMLManifoldCredentialsElement: {
    prototype: HTMLManifoldCredentialsElement;
    new (): HTMLManifoldCredentialsElement;
  };

  interface HTMLManifoldCredentialsViewElement extends Components.ManifoldCredentialsView, HTMLStencilElement {}
  var HTMLManifoldCredentialsViewElement: {
    prototype: HTMLManifoldCredentialsViewElement;
    new (): HTMLManifoldCredentialsViewElement;
  };

  interface HTMLManifoldDataDeprovisionButtonElement extends Components.ManifoldDataDeprovisionButton, HTMLStencilElement {}
  var HTMLManifoldDataDeprovisionButtonElement: {
    prototype: HTMLManifoldDataDeprovisionButtonElement;
    new (): HTMLManifoldDataDeprovisionButtonElement;
  };

  interface HTMLManifoldDataHasResourceElement extends Components.ManifoldDataHasResource, HTMLStencilElement {}
  var HTMLManifoldDataHasResourceElement: {
    prototype: HTMLManifoldDataHasResourceElement;
    new (): HTMLManifoldDataHasResourceElement;
  };

  interface HTMLManifoldDataManageButtonElement extends Components.ManifoldDataManageButton, HTMLStencilElement {}
  var HTMLManifoldDataManageButtonElement: {
    prototype: HTMLManifoldDataManageButtonElement;
    new (): HTMLManifoldDataManageButtonElement;
  };

  interface HTMLManifoldDataProductLogoElement extends Components.ManifoldDataProductLogo, HTMLStencilElement {}
  var HTMLManifoldDataProductLogoElement: {
    prototype: HTMLManifoldDataProductLogoElement;
    new (): HTMLManifoldDataProductLogoElement;
  };

  interface HTMLManifoldDataProductNameElement extends Components.ManifoldDataProductName, HTMLStencilElement {}
  var HTMLManifoldDataProductNameElement: {
    prototype: HTMLManifoldDataProductNameElement;
    new (): HTMLManifoldDataProductNameElement;
  };

  interface HTMLManifoldDataProvisionButtonElement extends Components.ManifoldDataProvisionButton, HTMLStencilElement {}
  var HTMLManifoldDataProvisionButtonElement: {
    prototype: HTMLManifoldDataProvisionButtonElement;
    new (): HTMLManifoldDataProvisionButtonElement;
  };

  interface HTMLManifoldDataRenameButtonElement extends Components.ManifoldDataRenameButton, HTMLStencilElement {}
  var HTMLManifoldDataRenameButtonElement: {
    prototype: HTMLManifoldDataRenameButtonElement;
    new (): HTMLManifoldDataRenameButtonElement;
  };

  interface HTMLManifoldDataResourceListElement extends Components.ManifoldDataResourceList, HTMLStencilElement {}
  var HTMLManifoldDataResourceListElement: {
    prototype: HTMLManifoldDataResourceListElement;
    new (): HTMLManifoldDataResourceListElement;
  };

  interface HTMLManifoldDataResourceLogoElement extends Components.ManifoldDataResourceLogo, HTMLStencilElement {}
  var HTMLManifoldDataResourceLogoElement: {
    prototype: HTMLManifoldDataResourceLogoElement;
    new (): HTMLManifoldDataResourceLogoElement;
  };

  interface HTMLManifoldDataSsoButtonElement extends Components.ManifoldDataSsoButton, HTMLStencilElement {}
  var HTMLManifoldDataSsoButtonElement: {
    prototype: HTMLManifoldDataSsoButtonElement;
    new (): HTMLManifoldDataSsoButtonElement;
  };

  interface HTMLManifoldForwardSlotElement extends Components.ManifoldForwardSlot, HTMLStencilElement {}
  var HTMLManifoldForwardSlotElement: {
    prototype: HTMLManifoldForwardSlotElement;
    new (): HTMLManifoldForwardSlotElement;
  };

  interface HTMLManifoldIconElement extends Components.ManifoldIcon, HTMLStencilElement {}
  var HTMLManifoldIconElement: {
    prototype: HTMLManifoldIconElement;
    new (): HTMLManifoldIconElement;
  };

  interface HTMLManifoldImageGalleryElement extends Components.ManifoldImageGallery, HTMLStencilElement {}
  var HTMLManifoldImageGalleryElement: {
    prototype: HTMLManifoldImageGalleryElement;
    new (): HTMLManifoldImageGalleryElement;
  };

  interface HTMLManifoldInputElement extends Components.ManifoldInput, HTMLStencilElement {}
  var HTMLManifoldInputElement: {
    prototype: HTMLManifoldInputElement;
    new (): HTMLManifoldInputElement;
  };

  interface HTMLManifoldLazyImageElement extends Components.ManifoldLazyImage, HTMLStencilElement {}
  var HTMLManifoldLazyImageElement: {
    prototype: HTMLManifoldLazyImageElement;
    new (): HTMLManifoldLazyImageElement;
  };

  interface HTMLManifoldMarketplaceElement extends Components.ManifoldMarketplace, HTMLStencilElement {}
  var HTMLManifoldMarketplaceElement: {
    prototype: HTMLManifoldMarketplaceElement;
    new (): HTMLManifoldMarketplaceElement;
  };

  interface HTMLManifoldMarketplaceGridElement extends Components.ManifoldMarketplaceGrid, HTMLStencilElement {}
  var HTMLManifoldMarketplaceGridElement: {
    prototype: HTMLManifoldMarketplaceGridElement;
    new (): HTMLManifoldMarketplaceGridElement;
  };

  interface HTMLManifoldMockResourceElement extends Components.ManifoldMockResource, HTMLStencilElement {}
  var HTMLManifoldMockResourceElement: {
    prototype: HTMLManifoldMockResourceElement;
    new (): HTMLManifoldMockResourceElement;
  };

  interface HTMLManifoldNumberInputElement extends Components.ManifoldNumberInput, HTMLStencilElement {}
  var HTMLManifoldNumberInputElement: {
    prototype: HTMLManifoldNumberInputElement;
    new (): HTMLManifoldNumberInputElement;
  };

  interface HTMLManifoldPlanElement extends Components.ManifoldPlan, HTMLStencilElement {}
  var HTMLManifoldPlanElement: {
    prototype: HTMLManifoldPlanElement;
    new (): HTMLManifoldPlanElement;
  };

  interface HTMLManifoldPlanCostElement extends Components.ManifoldPlanCost, HTMLStencilElement {}
  var HTMLManifoldPlanCostElement: {
    prototype: HTMLManifoldPlanCostElement;
    new (): HTMLManifoldPlanCostElement;
  };

  interface HTMLManifoldPlanDetailsElement extends Components.ManifoldPlanDetails, HTMLStencilElement {}
  var HTMLManifoldPlanDetailsElement: {
    prototype: HTMLManifoldPlanDetailsElement;
    new (): HTMLManifoldPlanDetailsElement;
  };

  interface HTMLManifoldPlanMenuElement extends Components.ManifoldPlanMenu, HTMLStencilElement {}
  var HTMLManifoldPlanMenuElement: {
    prototype: HTMLManifoldPlanMenuElement;
    new (): HTMLManifoldPlanMenuElement;
  };

  interface HTMLManifoldPlanSelectorElement extends Components.ManifoldPlanSelector, HTMLStencilElement {}
  var HTMLManifoldPlanSelectorElement: {
    prototype: HTMLManifoldPlanSelectorElement;
    new (): HTMLManifoldPlanSelectorElement;
  };

  interface HTMLManifoldProductElement extends Components.ManifoldProduct, HTMLStencilElement {}
  var HTMLManifoldProductElement: {
    prototype: HTMLManifoldProductElement;
    new (): HTMLManifoldProductElement;
  };

  interface HTMLManifoldProductDetailsElement extends Components.ManifoldProductDetails, HTMLStencilElement {}
  var HTMLManifoldProductDetailsElement: {
    prototype: HTMLManifoldProductDetailsElement;
    new (): HTMLManifoldProductDetailsElement;
  };

  interface HTMLManifoldProductPageElement extends Components.ManifoldProductPage, HTMLStencilElement {}
  var HTMLManifoldProductPageElement: {
    prototype: HTMLManifoldProductPageElement;
    new (): HTMLManifoldProductPageElement;
  };

  interface HTMLManifoldRegionSelectorElement extends Components.ManifoldRegionSelector, HTMLStencilElement {}
  var HTMLManifoldRegionSelectorElement: {
    prototype: HTMLManifoldRegionSelectorElement;
    new (): HTMLManifoldRegionSelectorElement;
  };

  interface HTMLManifoldResourceCardElement extends Components.ManifoldResourceCard, HTMLStencilElement {}
  var HTMLManifoldResourceCardElement: {
    prototype: HTMLManifoldResourceCardElement;
    new (): HTMLManifoldResourceCardElement;
  };

  interface HTMLManifoldResourceCardViewElement extends Components.ManifoldResourceCardView, HTMLStencilElement {}
  var HTMLManifoldResourceCardViewElement: {
    prototype: HTMLManifoldResourceCardViewElement;
    new (): HTMLManifoldResourceCardViewElement;
  };

  interface HTMLManifoldResourceContainerElement extends Components.ManifoldResourceContainer, HTMLStencilElement {}
  var HTMLManifoldResourceContainerElement: {
    prototype: HTMLManifoldResourceContainerElement;
    new (): HTMLManifoldResourceContainerElement;
  };

  interface HTMLManifoldResourceCredentialsElement extends Components.ManifoldResourceCredentials, HTMLStencilElement {}
  var HTMLManifoldResourceCredentialsElement: {
    prototype: HTMLManifoldResourceCredentialsElement;
    new (): HTMLManifoldResourceCredentialsElement;
  };

  interface HTMLManifoldResourceDeprovisionElement extends Components.ManifoldResourceDeprovision, HTMLStencilElement {}
  var HTMLManifoldResourceDeprovisionElement: {
    prototype: HTMLManifoldResourceDeprovisionElement;
    new (): HTMLManifoldResourceDeprovisionElement;
  };

  interface HTMLManifoldResourceDetailsElement extends Components.ManifoldResourceDetails, HTMLStencilElement {}
  var HTMLManifoldResourceDetailsElement: {
    prototype: HTMLManifoldResourceDetailsElement;
    new (): HTMLManifoldResourceDetailsElement;
  };

  interface HTMLManifoldResourceDetailsViewElement extends Components.ManifoldResourceDetailsView, HTMLStencilElement {}
  var HTMLManifoldResourceDetailsViewElement: {
    prototype: HTMLManifoldResourceDetailsViewElement;
    new (): HTMLManifoldResourceDetailsViewElement;
  };

  interface HTMLManifoldResourceListElement extends Components.ManifoldResourceList, HTMLStencilElement {}
  var HTMLManifoldResourceListElement: {
    prototype: HTMLManifoldResourceListElement;
    new (): HTMLManifoldResourceListElement;
  };

  interface HTMLManifoldResourcePlanElement extends Components.ManifoldResourcePlan, HTMLStencilElement {}
  var HTMLManifoldResourcePlanElement: {
    prototype: HTMLManifoldResourcePlanElement;
    new (): HTMLManifoldResourcePlanElement;
  };

  interface HTMLManifoldResourceProductElement extends Components.ManifoldResourceProduct, HTMLStencilElement {}
  var HTMLManifoldResourceProductElement: {
    prototype: HTMLManifoldResourceProductElement;
    new (): HTMLManifoldResourceProductElement;
  };

  interface HTMLManifoldResourceRenameElement extends Components.ManifoldResourceRename, HTMLStencilElement {}
  var HTMLManifoldResourceRenameElement: {
    prototype: HTMLManifoldResourceRenameElement;
    new (): HTMLManifoldResourceRenameElement;
  };

  interface HTMLManifoldResourceSsoElement extends Components.ManifoldResourceSso, HTMLStencilElement {}
  var HTMLManifoldResourceSsoElement: {
    prototype: HTMLManifoldResourceSsoElement;
    new (): HTMLManifoldResourceSsoElement;
  };

  interface HTMLManifoldResourceStatusElement extends Components.ManifoldResourceStatus, HTMLStencilElement {}
  var HTMLManifoldResourceStatusElement: {
    prototype: HTMLManifoldResourceStatusElement;
    new (): HTMLManifoldResourceStatusElement;
  };

  interface HTMLManifoldResourceStatusViewElement extends Components.ManifoldResourceStatusView, HTMLStencilElement {}
  var HTMLManifoldResourceStatusViewElement: {
    prototype: HTMLManifoldResourceStatusViewElement;
    new (): HTMLManifoldResourceStatusViewElement;
  };

  interface HTMLManifoldSelectElement extends Components.ManifoldSelect, HTMLStencilElement {}
  var HTMLManifoldSelectElement: {
    prototype: HTMLManifoldSelectElement;
    new (): HTMLManifoldSelectElement;
  };

  interface HTMLManifoldServiceCardElement extends Components.ManifoldServiceCard, HTMLStencilElement {}
  var HTMLManifoldServiceCardElement: {
    prototype: HTMLManifoldServiceCardElement;
    new (): HTMLManifoldServiceCardElement;
  };

  interface HTMLManifoldServiceCardViewElement extends Components.ManifoldServiceCardView, HTMLStencilElement {}
  var HTMLManifoldServiceCardViewElement: {
    prototype: HTMLManifoldServiceCardViewElement;
    new (): HTMLManifoldServiceCardViewElement;
  };

  interface HTMLManifoldSkeletonImgElement extends Components.ManifoldSkeletonImg, HTMLStencilElement {}
  var HTMLManifoldSkeletonImgElement: {
    prototype: HTMLManifoldSkeletonImgElement;
    new (): HTMLManifoldSkeletonImgElement;
  };

  interface HTMLManifoldSkeletonTextElement extends Components.ManifoldSkeletonText, HTMLStencilElement {}
  var HTMLManifoldSkeletonTextElement: {
    prototype: HTMLManifoldSkeletonTextElement;
    new (): HTMLManifoldSkeletonTextElement;
  };

  interface HTMLManifoldTemplateCardElement extends Components.ManifoldTemplateCard, HTMLStencilElement {}
  var HTMLManifoldTemplateCardElement: {
    prototype: HTMLManifoldTemplateCardElement;
    new (): HTMLManifoldTemplateCardElement;
  };

  interface HTMLManifoldToastElement extends Components.ManifoldToast, HTMLStencilElement {}
  var HTMLManifoldToastElement: {
    prototype: HTMLManifoldToastElement;
    new (): HTMLManifoldToastElement;
  };

  interface HTMLManifoldToggleElement extends Components.ManifoldToggle, HTMLStencilElement {}
  var HTMLManifoldToggleElement: {
    prototype: HTMLManifoldToggleElement;
    new (): HTMLManifoldToggleElement;
  };

  interface HTMLManifoldTooltipElement extends Components.ManifoldTooltip, HTMLStencilElement {}
  var HTMLManifoldTooltipElement: {
    prototype: HTMLManifoldTooltipElement;
    new (): HTMLManifoldTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'manifold-active-plan': HTMLManifoldActivePlanElement;
    'manifold-auth-token': HTMLManifoldAuthTokenElement;
    'manifold-badge': HTMLManifoldBadgeElement;
    'manifold-button': HTMLManifoldButtonElement;
    'manifold-button-link': HTMLManifoldButtonLinkElement;
    'manifold-connection': HTMLManifoldConnectionElement;
    'manifold-cost-display': HTMLManifoldCostDisplayElement;
    'manifold-credentials': HTMLManifoldCredentialsElement;
    'manifold-credentials-view': HTMLManifoldCredentialsViewElement;
    'manifold-data-deprovision-button': HTMLManifoldDataDeprovisionButtonElement;
    'manifold-data-has-resource': HTMLManifoldDataHasResourceElement;
    'manifold-data-manage-button': HTMLManifoldDataManageButtonElement;
    'manifold-data-product-logo': HTMLManifoldDataProductLogoElement;
    'manifold-data-product-name': HTMLManifoldDataProductNameElement;
    'manifold-data-provision-button': HTMLManifoldDataProvisionButtonElement;
    'manifold-data-rename-button': HTMLManifoldDataRenameButtonElement;
    'manifold-data-resource-list': HTMLManifoldDataResourceListElement;
    'manifold-data-resource-logo': HTMLManifoldDataResourceLogoElement;
    'manifold-data-sso-button': HTMLManifoldDataSsoButtonElement;
    'manifold-forward-slot': HTMLManifoldForwardSlotElement;
    'manifold-icon': HTMLManifoldIconElement;
    'manifold-image-gallery': HTMLManifoldImageGalleryElement;
    'manifold-input': HTMLManifoldInputElement;
    'manifold-lazy-image': HTMLManifoldLazyImageElement;
    'manifold-marketplace': HTMLManifoldMarketplaceElement;
    'manifold-marketplace-grid': HTMLManifoldMarketplaceGridElement;
    'manifold-mock-resource': HTMLManifoldMockResourceElement;
    'manifold-number-input': HTMLManifoldNumberInputElement;
    'manifold-plan': HTMLManifoldPlanElement;
    'manifold-plan-cost': HTMLManifoldPlanCostElement;
    'manifold-plan-details': HTMLManifoldPlanDetailsElement;
    'manifold-plan-menu': HTMLManifoldPlanMenuElement;
    'manifold-plan-selector': HTMLManifoldPlanSelectorElement;
    'manifold-product': HTMLManifoldProductElement;
    'manifold-product-details': HTMLManifoldProductDetailsElement;
    'manifold-product-page': HTMLManifoldProductPageElement;
    'manifold-region-selector': HTMLManifoldRegionSelectorElement;
    'manifold-resource-card': HTMLManifoldResourceCardElement;
    'manifold-resource-card-view': HTMLManifoldResourceCardViewElement;
    'manifold-resource-container': HTMLManifoldResourceContainerElement;
    'manifold-resource-credentials': HTMLManifoldResourceCredentialsElement;
    'manifold-resource-deprovision': HTMLManifoldResourceDeprovisionElement;
    'manifold-resource-details': HTMLManifoldResourceDetailsElement;
    'manifold-resource-details-view': HTMLManifoldResourceDetailsViewElement;
    'manifold-resource-list': HTMLManifoldResourceListElement;
    'manifold-resource-plan': HTMLManifoldResourcePlanElement;
    'manifold-resource-product': HTMLManifoldResourceProductElement;
    'manifold-resource-rename': HTMLManifoldResourceRenameElement;
    'manifold-resource-sso': HTMLManifoldResourceSsoElement;
    'manifold-resource-status': HTMLManifoldResourceStatusElement;
    'manifold-resource-status-view': HTMLManifoldResourceStatusViewElement;
    'manifold-select': HTMLManifoldSelectElement;
    'manifold-service-card': HTMLManifoldServiceCardElement;
    'manifold-service-card-view': HTMLManifoldServiceCardViewElement;
    'manifold-skeleton-img': HTMLManifoldSkeletonImgElement;
    'manifold-skeleton-text': HTMLManifoldSkeletonTextElement;
    'manifold-template-card': HTMLManifoldTemplateCardElement;
    'manifold-toast': HTMLManifoldToastElement;
    'manifold-toggle': HTMLManifoldToggleElement;
    'manifold-tooltip': HTMLManifoldTooltipElement;
  }
}

declare namespace LocalJSX {
  interface ManifoldActivePlan extends JSXBase.HTMLAttributes<HTMLManifoldActivePlanElement> {
    'isExistingResource'?: boolean;
    'plans'?: Catalog.ExpandedPlan[];
    'product'?: Catalog.Product;
    'regions'?: string[];
    'selectedResource'?: Gateway.Resource;
  }
  interface ManifoldAuthToken extends JSXBase.HTMLAttributes<HTMLManifoldAuthTokenElement> {
    'oauthUrl'?: string;
    'onManifold-token-receive'?: (event: CustomEvent<any>) => void;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'setAuthToken'?: (s: string) => void;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'subscribe'?: (s: Subscriber) => () => void;
    'token'?: string;
  }
  interface ManifoldBadge extends JSXBase.HTMLAttributes<HTMLManifoldBadgeElement> {}
  interface ManifoldButton extends JSXBase.HTMLAttributes<HTMLManifoldButtonElement> {
    'color'?: 'black' | 'gray' | 'orange' | 'pink' | 'white';
    'disabled'?: boolean;
    'href'?: string;
    'onManifold-button-click'?: (event: CustomEvent<any>) => void;
    'size'?: 'medium' | 'small';
    'stencilClickEvent'?: (e: MouseEvent) => void;
    'type'?: 'button' | 'submit';
  }
  interface ManifoldButtonLink extends JSXBase.HTMLAttributes<HTMLManifoldButtonLinkElement> {
    'color'?: 'black' | 'gray' | 'orange' | 'pink' | 'white';
    'href'?: string;
    'onManifold-buttonLink-click'?: (event: CustomEvent<any>) => void;
    'preserveEvent'?: boolean;
    'rel'?: string;
    'size'?: 'medium' | 'small';
    'stencilClickEvent'?: (e: MouseEvent) => void;
    'target'?: string;
  }
  interface ManifoldConnection extends JSXBase.HTMLAttributes<HTMLManifoldConnectionElement> {
    /**
    * _(optional)_ Specify `env="stage"` for staging
    */
    'env'?: 'local' | 'stage' | 'prod';
    /**
    * _(hidden)_ Passed by the state tunnel
    */
    'setEnv'?: (env: 'local' | 'stage' | 'prod') => void;
    'setWaitTime'?: (waitTime: number) => void;
    /**
    * _(optional)_ Wait time for the fetch calls before it times out
    */
    'waitTime'?: number;
  }
  interface ManifoldCostDisplay extends JSXBase.HTMLAttributes<HTMLManifoldCostDisplayElement> {
    'baseCost'?: number;
    'compact'?: boolean;
    'measuredFeatures'?: Catalog.ExpandedFeature[];
    'startingAt'?: boolean;
  }
  interface ManifoldCredentials extends JSXBase.HTMLAttributes<HTMLManifoldCredentialsElement> {
    'resourceId'?: string;
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldCredentialsView extends JSXBase.HTMLAttributes<HTMLManifoldCredentialsViewElement> {
    'credentials'?: Marketplace.Credential[];
    'loading'?: boolean;
    'onCredentialsRequested'?: (event: CustomEvent<any>) => void;
    'resourceLabel'?: string;
  }
  interface ManifoldDataDeprovisionButton extends JSXBase.HTMLAttributes<HTMLManifoldDataDeprovisionButtonElement> {
    'loading'?: boolean;
    'onManifold-deprovisionButton-click'?: (event: CustomEvent<any>) => void;
    'onManifold-deprovisionButton-error'?: (event: CustomEvent<any>) => void;
    'onManifold-deprovisionButton-success'?: (event: CustomEvent<any>) => void;
    'resourceId'?: string;
    /**
    * The label of the resource to deprovision
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataHasResource extends JSXBase.HTMLAttributes<HTMLManifoldDataHasResourceElement> {
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataManageButton extends JSXBase.HTMLAttributes<HTMLManifoldDataManageButtonElement> {
    'features'?: Gateway.FeatureMap;
    'onManifold-manageButton-click'?: (event: CustomEvent<any>) => void;
    'onManifold-manageButton-error'?: (event: CustomEvent<any>) => void;
    'onManifold-manageButton-success'?: (event: CustomEvent<any>) => void;
    'planId'?: string;
    'productId'?: string;
    'regionId'?: string;
    /**
    * Name of resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataProductLogo extends JSXBase.HTMLAttributes<HTMLManifoldDataProductLogoElement> {
    /**
    * _(optional)_ `alt` attribute
    */
    'alt'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'graphqlFetch'?: GraphqlFetch;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * _(Deprecated)_ Look up product logo from resource
    */
    'resourceLabel'?: string;
  }
  interface ManifoldDataProductName extends JSXBase.HTMLAttributes<HTMLManifoldDataProductNameElement> {
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * Look up product name from resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataProvisionButton extends JSXBase.HTMLAttributes<HTMLManifoldDataProvisionButtonElement> {
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'graphqlFetch'?: GraphqlFetch;
    'onManifold-provisionButton-click'?: (event: CustomEvent<any>) => void;
    'onManifold-provisionButton-error'?: (event: CustomEvent<any>) => void;
    'onManifold-provisionButton-invalid'?: (event: CustomEvent<any>) => void;
    'onManifold-provisionButton-success'?: (event: CustomEvent<any>) => void;
    'ownerId'?: string;
    /**
    * Plan to provision (slug)
    */
    'planLabel'?: string;
    /**
    * Product to provision (slug)
    */
    'productLabel'?: string;
    /**
    * Region to provision (ID)
    */
    'regionId'?: string;
    /**
    * The label of the resource to provision
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataRenameButton extends JSXBase.HTMLAttributes<HTMLManifoldDataRenameButtonElement> {
    'loading'?: boolean;
    /**
    * The new label to give to the resource
    */
    'newLabel'?: string;
    'onManifold-renameButton-click'?: (event: CustomEvent<any>) => void;
    'onManifold-renameButton-error'?: (event: CustomEvent<any>) => void;
    'onManifold-renameButton-invalid'?: (event: CustomEvent<any>) => void;
    'onManifold-renameButton-success'?: (event: CustomEvent<any>) => void;
    /**
    * The id of the resource to rename, will be fetched if not set
    */
    'resourceId'?: string;
    /**
    * The label of the resource to rename
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataResourceList extends JSXBase.HTMLAttributes<HTMLManifoldDataResourceListElement> {
    'onManifold-resourceList-click'?: (event: CustomEvent<any>) => void;
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Link format structure, with `:resource` placeholder
    */
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataResourceLogo extends JSXBase.HTMLAttributes<HTMLManifoldDataResourceLogoElement> {
    /**
    * _(optional)_ `alt` attribute
    */
    'alt'?: string;
    /**
    * Look up product logo from resource
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldDataSsoButton extends JSXBase.HTMLAttributes<HTMLManifoldDataSsoButtonElement> {
    'loading'?: boolean;
    'onManifold-ssoButton-click'?: (event: CustomEvent<any>) => void;
    'onManifold-ssoButton-error'?: (event: CustomEvent<any>) => void;
    'onManifold-ssoButton-success'?: (event: CustomEvent<any>) => void;
    /**
    * The id of the resource to rename, will be fetched if not set
    */
    'resourceId'?: string;
    /**
    * The label of the resource to rename
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldForwardSlot extends JSXBase.HTMLAttributes<HTMLManifoldForwardSlotElement> {}
  interface ManifoldIcon extends JSXBase.HTMLAttributes<HTMLManifoldIconElement> {
    /**
    * a CSS variable starting with `--manifold-c-*`
    */
    'color'?: string;
    /**
    * a CSS variable starting with `--manifold-g-*`
    */
    'gradient'?: string;
    /**
    * The icon ID
    */
    'icon'?: string;
    'marginLeft'?: boolean;
    'marginRight'?: boolean;
  }
  interface ManifoldImageGallery extends JSXBase.HTMLAttributes<HTMLManifoldImageGalleryElement> {
    'images'?: string[];
  }
  interface ManifoldInput extends JSXBase.HTMLAttributes<HTMLManifoldInputElement> {
    'defaultValue'?: string;
    'disabled'?: boolean;
    'inputId'?: string;
    'name'?: string;
    'onUpdateValue'?: (event: CustomEvent<any>) => void;
    'pattern'?: string;
    'required'?: boolean;
    'type'?: string;
  }
  interface ManifoldLazyImage extends JSXBase.HTMLAttributes<HTMLManifoldLazyImageElement> {
    'alt'?: string;
    'itemprop'?: string;
    'src'?: string;
  }
  interface ManifoldMarketplace extends JSXBase.HTMLAttributes<HTMLManifoldMarketplaceElement> {
    /**
    * Comma-separated list of featured products (labels)
    */
    'featured'?: string;
    /**
    * Hide categories & side menu?
    */
    'hideCategories'?: boolean;
    /**
    * Hide search?
    */
    'hideSearch'?: boolean;
    /**
    * Hide template cards?
    */
    'hideTemplates'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Product link structure, with `:product` placeholder
    */
    'productLinkFormat'?: string;
    /**
    * Comma-separated list of shown products (labels)
    */
    'products'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    /**
    * Template format structure, with `:product` placeholder
    */
    'templateLinkFormat'?: string;
  }
  interface ManifoldMarketplaceGrid extends JSXBase.HTMLAttributes<HTMLManifoldMarketplaceGridElement> {
    'featured'?: string[];
    'freeProducts'?: string[];
    'hideCategories'?: boolean;
    'hideSearch'?: boolean;
    'hideTemplates'?: boolean;
    'preserveEvent'?: boolean;
    'productLinkFormat'?: string;
    'products'?: string[];
    'services'?: Catalog.Product[];
    'skeleton'?: boolean;
    'templateLinkFormat'?: string;
  }
  interface ManifoldMockResource extends JSXBase.HTMLAttributes<HTMLManifoldMockResourceElement> {
    'mock'?: Gateway.Resource;
  }
  interface ManifoldNumberInput extends JSXBase.HTMLAttributes<HTMLManifoldNumberInputElement> {
    'decrementDisabledLabel'?: string;
    'error'?: string;
    'increment'?: number;
    'incrementDisabledLabel'?: string;
    'max'?: number;
    'min'?: number;
    'name'?: string;
    'onUpdateValue'?: (event: CustomEvent<any>) => void;
    'suffix'?: string;
    'value'?: number;
  }
  interface ManifoldPlan extends JSXBase.HTMLAttributes<HTMLManifoldPlanElement> {
    /**
    * URL-friendly slug (e.g. `"kitefin"`)
    */
    'planLabel'?: string;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldPlanCost extends JSXBase.HTMLAttributes<HTMLManifoldPlanCostElement> {
    /**
    * All plan features
    */
    'allFeatures'?: Catalog.ExpandedFeature[];
    /**
    * Compact mode (for plan selector sidebar)
    */
    'compact'?: boolean;
    /**
    * Plan default cost
    */
    'defaultCost'?: number;
    /**
    * Plan ID
    */
    'planId'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    /**
    * User-selected plan features (needed only for customizable)
    */
    'selectedFeatures'?: Gateway.FeatureMap;
  }
  interface ManifoldPlanDetails extends JSXBase.HTMLAttributes<HTMLManifoldPlanDetailsElement> {
    'isExistingResource'?: boolean;
    'onManifold-planSelector-change'?: (event: CustomEvent<any>) => void;
    'onManifold-planSelector-load'?: (event: CustomEvent<any>) => void;
    'plan'?: Catalog.ExpandedPlan;
    'product'?: Catalog.Product;
    'regions'?: string[];
    'resourceFeatures'?: Gateway.ResolvedFeature[];
    'resourceRegion'?: string;
    'scrollLocked'?: boolean;
  }
  interface ManifoldPlanMenu extends JSXBase.HTMLAttributes<HTMLManifoldPlanMenuElement> {
    'plans'?: Catalog.ExpandedPlan[];
    'selectPlan'?: Function;
    'selectedPlanId'?: string;
  }
  interface ManifoldPlanSelector extends JSXBase.HTMLAttributes<HTMLManifoldPlanSelectorElement> {
    /**
    * Show only free plans?
    */
    'freePlans'?: boolean;
    /**
    * URL-friendly slug (e.g. `"jawsdb-mysql"`)
    */
    'productLabel'?: string;
    /**
    * Specify region order
    */
    'regions'?: string;
    /**
    * Is this tied to an existing resource?
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldProduct extends JSXBase.HTMLAttributes<HTMLManifoldProductElement> {
    /**
    * _(optional)_ Hide the CTA on the left?
    */
    'productLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldProductDetails extends JSXBase.HTMLAttributes<HTMLManifoldProductDetailsElement> {
    'product'?: Catalog.Product;
  }
  interface ManifoldProductPage extends JSXBase.HTMLAttributes<HTMLManifoldProductPageElement> {
    'product'?: Catalog.Product;
    'provider'?: Catalog.Provider;
  }
  interface ManifoldRegionSelector extends JSXBase.HTMLAttributes<HTMLManifoldRegionSelectorElement> {
    'allowedRegions'?: string[];
    'ariaLabel'?: string;
    'name'?: string;
    'onUpdateValue'?: (event: CustomEvent<any>) => void;
    'preferredRegions'?: string[];
    'regions'?: Catalog.Region[];
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
    'value'?: string;
  }
  interface ManifoldResourceCard extends JSXBase.HTMLAttributes<HTMLManifoldResourceCardElement> {
    'label'?: string;
    'preserveEvent'?: boolean;
    'resourceId'?: string;
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceCardView extends JSXBase.HTMLAttributes<HTMLManifoldResourceCardViewElement> {
    'label'?: string;
    'loading'?: boolean;
    'logo'?: string;
    'name'?: string;
    'onManifold-resource-click'?: (event: CustomEvent<any>) => void;
    'preserveEvent'?: boolean;
    'resourceId'?: string;
    'resourceLinkFormat'?: string;
    'resourceStatus'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceContainer extends JSXBase.HTMLAttributes<HTMLManifoldResourceContainerElement> {
    /**
    * Set whether or not to refetch the resource from the api until it is in an available and valid state
    */
    'refetchUntilValid'?: boolean;
    /**
    * Which resource does this belong to?
    */
    'resourceLabel'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourceCredentials extends JSXBase.HTMLAttributes<HTMLManifoldResourceCredentialsElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
  }
  interface ManifoldResourceDeprovision extends JSXBase.HTMLAttributes<HTMLManifoldResourceDeprovisionElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
  }
  interface ManifoldResourceDetails extends JSXBase.HTMLAttributes<HTMLManifoldResourceDetailsElement> {}
  interface ManifoldResourceDetailsView extends JSXBase.HTMLAttributes<HTMLManifoldResourceDetailsViewElement> {
    'data'?: Gateway.Resource;
  }
  interface ManifoldResourceList extends JSXBase.HTMLAttributes<HTMLManifoldResourceListElement> {
    /**
    * Disable auto-updates?
    */
    'paused'?: boolean;
    /**
    * Should the JS event still fire, even if product-link-format is passed?
    */
    'preserveEvent'?: boolean;
    /**
    * Link format structure, with `:resource` placeholder
    */
    'resourceLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldResourcePlan extends JSXBase.HTMLAttributes<HTMLManifoldResourcePlanElement> {}
  interface ManifoldResourceProduct extends JSXBase.HTMLAttributes<HTMLManifoldResourceProductElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
  }
  interface ManifoldResourceRename extends JSXBase.HTMLAttributes<HTMLManifoldResourceRenameElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
    /**
    * The new label to give to the resource
    */
    'newLabel'?: string;
  }
  interface ManifoldResourceSso extends JSXBase.HTMLAttributes<HTMLManifoldResourceSsoElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
  }
  interface ManifoldResourceStatus extends JSXBase.HTMLAttributes<HTMLManifoldResourceStatusElement> {
    'data'?: Gateway.Resource;
    'loading'?: boolean;
    'size'?: 'xsmall' | 'small' | 'medium';
  }
  interface ManifoldResourceStatusView extends JSXBase.HTMLAttributes<HTMLManifoldResourceStatusViewElement> {
    'loading'?: boolean;
    'resourceState'?: string;
    'size'?: 'xsmall' | 'small' | 'medium';
  }
  interface ManifoldSelect extends JSXBase.HTMLAttributes<HTMLManifoldSelectElement> {
    'defaultValue'?: string;
    'name'?: string;
    'onUpdateValue'?: (event: CustomEvent<any>) => void;
    'options'?: Option[];
    'required'?: boolean;
  }
  interface ManifoldServiceCard extends JSXBase.HTMLAttributes<HTMLManifoldServiceCardElement> {
    'isFeatured'?: boolean;
    'preserveEvent'?: boolean;
    'product'?: Catalog.Product;
    'productId'?: string;
    'productLabel'?: string;
    'productLinkFormat'?: string;
    /**
    * _(hidden)_ Passed by `<manifold-connection>`
    */
    'restFetch'?: RestFetch;
  }
  interface ManifoldServiceCardView extends JSXBase.HTMLAttributes<HTMLManifoldServiceCardViewElement> {
    'description'?: string;
    'isFeatured'?: boolean;
    'isFree'?: boolean;
    'logo'?: string;
    'name'?: string;
    'onManifold-marketplace-click'?: (event: CustomEvent<any>) => void;
    'preserveEvent'?: boolean;
    'productId'?: string;
    'productLabel'?: string;
    'productLinkFormat'?: string;
    'skeleton'?: boolean;
  }
  interface ManifoldSkeletonImg extends JSXBase.HTMLAttributes<HTMLManifoldSkeletonImgElement> {}
  interface ManifoldSkeletonText extends JSXBase.HTMLAttributes<HTMLManifoldSkeletonTextElement> {}
  interface ManifoldTemplateCard extends JSXBase.HTMLAttributes<HTMLManifoldTemplateCardElement> {
    'category'?: string;
    'onManifold-template-click'?: (event: CustomEvent<any>) => void;
    'preserveEvent'?: boolean;
    'templateLinkFormat'?: string;
  }
  interface ManifoldToast extends JSXBase.HTMLAttributes<HTMLManifoldToastElement> {
    /**
    * `success` | `warning` | `error`
    */
    'alertType'?: 'success' | 'warning' | 'error' | undefined;
    /**
    * Is this dismissable?
    */
    'dismissable'?: boolean;
    /**
    * Use custom icon path data (1024×1024)
    */
    'icon'?: string;
  }
  interface ManifoldToggle extends JSXBase.HTMLAttributes<HTMLManifoldToggleElement> {
    'ariaLabelledby'?: string;
    'defaultValue'?: boolean;
    'disabled'?: boolean;
    'label'?: string;
    'name'?: string;
    'onUpdateValue'?: (event: CustomEvent<any>) => void;
  }
  interface ManifoldTooltip extends JSXBase.HTMLAttributes<HTMLManifoldTooltipElement> {
    'labelText'?: string;
  }

  interface IntrinsicElements {
    'manifold-active-plan': ManifoldActivePlan;
    'manifold-auth-token': ManifoldAuthToken;
    'manifold-badge': ManifoldBadge;
    'manifold-button': ManifoldButton;
    'manifold-button-link': ManifoldButtonLink;
    'manifold-connection': ManifoldConnection;
    'manifold-cost-display': ManifoldCostDisplay;
    'manifold-credentials': ManifoldCredentials;
    'manifold-credentials-view': ManifoldCredentialsView;
    'manifold-data-deprovision-button': ManifoldDataDeprovisionButton;
    'manifold-data-has-resource': ManifoldDataHasResource;
    'manifold-data-manage-button': ManifoldDataManageButton;
    'manifold-data-product-logo': ManifoldDataProductLogo;
    'manifold-data-product-name': ManifoldDataProductName;
    'manifold-data-provision-button': ManifoldDataProvisionButton;
    'manifold-data-rename-button': ManifoldDataRenameButton;
    'manifold-data-resource-list': ManifoldDataResourceList;
    'manifold-data-resource-logo': ManifoldDataResourceLogo;
    'manifold-data-sso-button': ManifoldDataSsoButton;
    'manifold-forward-slot': ManifoldForwardSlot;
    'manifold-icon': ManifoldIcon;
    'manifold-image-gallery': ManifoldImageGallery;
    'manifold-input': ManifoldInput;
    'manifold-lazy-image': ManifoldLazyImage;
    'manifold-marketplace': ManifoldMarketplace;
    'manifold-marketplace-grid': ManifoldMarketplaceGrid;
    'manifold-mock-resource': ManifoldMockResource;
    'manifold-number-input': ManifoldNumberInput;
    'manifold-plan': ManifoldPlan;
    'manifold-plan-cost': ManifoldPlanCost;
    'manifold-plan-details': ManifoldPlanDetails;
    'manifold-plan-menu': ManifoldPlanMenu;
    'manifold-plan-selector': ManifoldPlanSelector;
    'manifold-product': ManifoldProduct;
    'manifold-product-details': ManifoldProductDetails;
    'manifold-product-page': ManifoldProductPage;
    'manifold-region-selector': ManifoldRegionSelector;
    'manifold-resource-card': ManifoldResourceCard;
    'manifold-resource-card-view': ManifoldResourceCardView;
    'manifold-resource-container': ManifoldResourceContainer;
    'manifold-resource-credentials': ManifoldResourceCredentials;
    'manifold-resource-deprovision': ManifoldResourceDeprovision;
    'manifold-resource-details': ManifoldResourceDetails;
    'manifold-resource-details-view': ManifoldResourceDetailsView;
    'manifold-resource-list': ManifoldResourceList;
    'manifold-resource-plan': ManifoldResourcePlan;
    'manifold-resource-product': ManifoldResourceProduct;
    'manifold-resource-rename': ManifoldResourceRename;
    'manifold-resource-sso': ManifoldResourceSso;
    'manifold-resource-status': ManifoldResourceStatus;
    'manifold-resource-status-view': ManifoldResourceStatusView;
    'manifold-select': ManifoldSelect;
    'manifold-service-card': ManifoldServiceCard;
    'manifold-service-card-view': ManifoldServiceCardView;
    'manifold-skeleton-img': ManifoldSkeletonImg;
    'manifold-skeleton-text': ManifoldSkeletonText;
    'manifold-template-card': ManifoldTemplateCard;
    'manifold-toast': ManifoldToast;
    'manifold-toggle': ManifoldToggle;
    'manifold-tooltip': ManifoldTooltip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


